import React, { createContext, useContext, useEffect, useMemo, useState } from "react";

export type Language = "en" | "hi";

type I18nContextValue = {
  lang: Language;
  setLang: (l: Language) => void;
  toggle: () => void;
  t: (key: string) => string;
};

const I18nContext = createContext<I18nContextValue | undefined>(undefined);

const translations: Record<Language, Record<string, string>> = {
  en: {
    appName: "JalRakshak",
    smartRainwaterHarvesting: "Smart rainwater harvesting",
    subtitleApp: "Rainwater Harvesting Feasibility App",
    cleanMinimal: "Clean, minimal, and professional.",
    heroDescription:
      "Get rain alerts and insights to assess rainwater harvesting potential in your area. Empowering communities to conserve groundwater through smart rainwater harvesting.",
    rainAlerts: "Rain Alerts",
    locationInsights: "Location insights",
    communityImpact: "Community impact",
    governmentPolicies: "Government Policies",
    getStarted: "Get Started",
    learnMore: "Learn more",
    whyJalRakshak: "Why JalRakshak",
    featureWeatherTitle: "Real-time weather",
    featureWeatherText: "Get hyperlocal rain alerts and rainfall intensity.",
    featureFeasTitle: "Feasibility insights",
    featureFeasText: "Assess rooftop potential and storage estimates.",
    featureCommunityTitle: "Community impact",
    featureCommunityText: "Encourage sustainable water practices in your area.",
    sectionGetStarted: "Get Started",
    cardAnalysisTitle: "Analysis",
    cardAnalysisDesc: "Explore feasibility analysis for your location.",
    cardWeatherTitle: "Weather",
    cardWeatherDesc: "View current and upcoming rainfall insights.",
    cardStructureTitle: "Structure",
    cardStructureDesc: "Get details for your harvesting structure.",
    cardFaqsTitle: "FAQs",
    cardFaqsDesc: "Find answers to common questions about JalRakshak.",
    open: "Open",
    navHome: "Home",
    navAnalysis: "Analysis",
    navWeather: "Weather",
    navStructure: "Structure",
    navFaqs: "FAQs",
    navAbout: "About us",
    toggleToHindi: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    toggleToEnglish: "English",
    weatherSubtitle: "Check conditions and rain alerts",
    enterLocation: "Enter your location",
    enterLocationPlaceholder: "Enter city, address, or location name",
    weatherHelp: "Get comprehensive weather data including current conditions, rain alerts, and annual rainfall analysis",
    loading: "Loading...",
    getAllWeatherData: "Get All Weather Data",
    currentConditions: "Current conditions",
    location: "Location",
    rainAlert24h: "Rain alert (24h)",
    rainExpected24h: "üåß Rain expected in next 24 hours.",
    noRain24h: "No significant rain expected in next 24 hours.",
    fetchingAnnualRainfall: "Fetching annual rainfall data...",
    annualRainfallAnalysis: "Annual Rainfall Analysis",
    annualTotal: "Annual Total",
    waterHarvestingPotential: "Water Harvesting Potential",
    runoffCoefficient80: "80% runoff coefficient",
    monthlyRainfallDistribution: "Monthly Rainfall Distribution",
    structureSubtitle: "Rainwater harvesting structures",
    chooseStructure: "Choose or type a structure",
    enterStructurePlaceholder: "Enter structure name (e.g., RCC tank, Recharge pit, Rain barrel)",
    showInfo: "Show Info",
    overview: "Overview",
    structureNotFound: "Structure not found. Please check the name and try again.",
    suitability: "Suitability",
    typicalDimensions: "Typical dimensions",
    materialsInstallation: "Materials & installation",
    estimatedCost: "Estimated cost",
    costsVary: "Costs vary by region and specifications.",
    maintenance: "Maintenance",
    relatedResources: "Related resources",
    wikipediaSearchPrefix: "We searched Wikipedia for",
    helpfulLinksSuffix: "Here are some helpful links:",
    searchingResources: "Searching resources‚Ä¶",
    noRelatedLinks: "No related links found.",
    selectAStructure: "Select a Structure",
    enterStructureHelp: "Enter a structure name above and click \"Show Info\" to view detailed information about rainwater harvesting structures.",
    oopsNotFound: "Oops! Page not found",
    returnHome: "Return to Home",
    waterManagementTagline: "Water Management & Analysis System",
    welcomeBack: "Welcome Back",
    signInToContinue: "Sign in to your account to continue",
    email: "Email",
    enterEmail: "Enter your email",
    password: "Password",
    enterPassword: "Enter your password",
    signingIn: "Signing in...",
    signIn: "Sign In",
    demoCredentials: "Demo credentials:",
    allRightsReserved: "All rights reserved.",
  },
  hi: {
    appName: "‡§ú‡§≤‡§∞‡§ï‡•ç‡§∑‡§ï",
    smartRainwaterHarvesting: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§®",
    subtitleApp: "‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞‡•ç‡§Ø‡§§‡§æ ‡§ê‡§™",
    cleanMinimal: "‡§∏‡§æ‡§´‡§º, ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§î‡§∞ ‡§™‡•á‡§∂‡•á‡§µ‡§∞‡•§",
    heroDescription:
      "‡§Ö‡§™‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§ï‡§æ ‡§Ü‡§ï‡§≤‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§î‡§∞ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§≠‡•Ç‡§ú‡§≤ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ‡•§",
    rainAlerts: "‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü",
    locationInsights: "‡§∏‡•ç‡§•‡§æ‡§® ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø",
    communityImpact: "‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ",
    governmentPolicies: "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Å",
    getStarted: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
    learnMore: "‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç",
    whyJalRakshak: "‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ú‡§≤‡§∞‡§ï‡•ç‡§∑‡§ï",
    featureWeatherTitle: "‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§Æ‡•å‡§∏‡§Æ",
    featureWeatherText: "‡§π‡§æ‡§á‡§™‡§∞‡§≤‡•ã‡§ï‡§≤ ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§î‡§∞ ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    featureFeasTitle: "‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞‡•ç‡§Ø‡§§‡§æ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø",
    featureFeasText: "‡§õ‡§§ ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§î‡§∞ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§ï‡§æ ‡§Ü‡§ï‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
    featureCommunityTitle: "‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ",
    featureCommunityText: "‡§Ö‡§™‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§§‡§§ ‡§ú‡§≤ ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    sectionGetStarted: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
    cardAnalysisTitle: "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
    cardAnalysisDesc: "‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞‡•ç‡§Ø‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§",
    cardWeatherTitle: "‡§Æ‡•å‡§∏‡§Æ",
    cardWeatherDesc: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§î‡§∞ ‡§Ü‡§ó‡§æ‡§Æ‡•Ä ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§",
    cardStructureTitle: "‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ",
    cardStructureDesc: "‡§Ö‡§™‡§®‡•á ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ï‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    cardFaqsTitle: "‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞",
    cardFaqsDesc: "‡§ú‡§≤‡§∞‡§ï‡•ç‡§∑‡§ï ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡§æ‡§è‡§Ç‡•§",
    open: "‡§ñ‡•ã‡§≤‡•á‡§Ç",
    navHome: "‡§Æ‡•Å‡§ñ‡§™‡•É‡§∑‡•ç‡§†",
    navAnalysis: "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
    navWeather: "‡§Æ‡•å‡§∏‡§Æ",
    navStructure: "‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ",
    navFaqs: "‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞",
    navAbout: "‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
    toggleToHindi: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    toggleToEnglish: "English",
    weatherSubtitle: "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç",
    enterLocation: "‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    enterLocationPlaceholder: "‡§∂‡§π‡§∞, ‡§™‡§§‡§æ, ‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    weatherHelp: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø, ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§î‡§∞ ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡§π‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
    loading: "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
    getAllWeatherData: "‡§∏‡§≠‡•Ä ‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
    currentConditions: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
    location: "‡§∏‡•ç‡§•‡§æ‡§®",
    rainAlert24h: "‡§µ‡§∞‡•ç‡§∑‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü (24 ‡§ò‡§Ç‡§ü‡•á)",
    rainExpected24h: "üåß ‡§Ö‡§ó‡§≤‡•á 24 ‡§ò‡§Ç‡§ü‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ‡•§",
    noRain24h: "‡§Ö‡§ó‡§≤‡•á 24 ‡§ò‡§Ç‡§ü‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§",
    fetchingAnnualRainfall: "‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...",
    annualRainfallAnalysis: "‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
    annualTotal: "‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ï‡•Å‡§≤",
    waterHarvestingPotential: "‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ",
    runoffCoefficient80: "80% ‡§∞‡§®‡§ë‡§´ ‡§ó‡•Å‡§£‡§æ‡§Ç‡§ï",
    monthlyRainfallDistribution: "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§µ‡§ø‡§§‡§∞‡§£",
    structureSubtitle: "‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ú‡§≤ ‡§∏‡§Ç‡§ö‡§Ø‡§® ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ‡§è‡§Å",
    chooseStructure: "‡§è‡§ï ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç ‡§Ø‡§æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç",
    enterStructurePlaceholder: "‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§≤‡§ø‡§ñ‡•á‡§Ç (‡§ú‡•à‡§∏‡•á, RCC ‡§ü‡•à‡§Ç‡§ï, ‡§∞‡§ø‡§ö‡§æ‡§∞‡•ç‡§ú ‡§™‡§ø‡§ü, ‡§∞‡•á‡§® ‡§¨‡•à‡§∞‡§≤)",
    showInfo: "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å",
    overview: "‡§™‡§∞‡§ø‡§ö‡§Ø",
    structureNotFound: "‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§æ‡§Æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
    suitability: "‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡§§‡§æ",
    typicalDimensions: "‡§Ü‡§Æ ‡§Ü‡§Ø‡§æ‡§Æ",
    materialsInstallation: "‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§î‡§∞ ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ",
    estimatedCost: "‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§≤‡§æ‡§ó‡§§",
    costsVary: "‡§≤‡§æ‡§ó‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§î‡§∞ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§≠‡§ø‡§®‡•ç‡§® ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§",
    maintenance: "‡§∞‡§ñ‡§∞‡§ñ‡§æ‡§µ",
    relatedResources: "‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®",
    wikipediaSearchPrefix: "‡§π‡§Æ‡§®‡•á ‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§™‡§∞ ‡§ñ‡•ã‡§ú‡§æ",
    helpfulLinksSuffix: "‡§Ø‡§π‡§æ‡§Å ‡§ï‡•Å‡§õ ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§≤‡§ø‡§Ç‡§ï ‡§π‡•à‡§Ç:",
    searchingResources: "‡§∏‡§Ç‡§∏‡§æ‡§ß‡§® ‡§ñ‡•ã‡§ú‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‚Ä¶",
    noRelatedLinks: "‡§ï‡•ã‡§à ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§≤‡§ø‡§Ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§",
    selectAStructure: "‡§è‡§ï ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
    enterStructureHelp: "‡§ä‡§™‡§∞ ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è \"‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å\" ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    oopsNotFound: "‡§â‡§´‡§º! ‡§™‡•É‡§∑‡•ç‡§† ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ",
    returnHome: "‡§Æ‡•Å‡§ñ‡§™‡•É‡§∑‡•ç‡§† ‡§™‡§∞ ‡§≤‡•å‡§ü‡•á‡§Ç",
    waterManagementTagline: "‡§ú‡§≤ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
    welcomeBack: "‡§µ‡§æ‡§™‡§∏‡•Ä ‡§™‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à",
    signInToContinue: "‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§ñ‡§æ‡§§‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§á‡§® ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç",
    email: "‡§à‡§Æ‡•á‡§≤",
    enterEmail: "‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    password: "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°",
    enterPassword: "‡§Ö‡§™‡§®‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    signingIn: "‡§∏‡§æ‡§á‡§® ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...",
    signIn: "‡§∏‡§æ‡§á‡§® ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç",
    demoCredentials: "‡§°‡•á‡§Æ‡•ã ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏:",
    allRightsReserved: "‡§∏‡§∞‡•ç‡§µ‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§‡•§",
  },
};

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [lang, setLang] = useState<Language>(() => {
    const saved = typeof window !== "undefined" ? localStorage.getItem("lang") : null;
    return (saved as Language) || "en";
  });

  useEffect(() => {
    try {
      localStorage.setItem("lang", lang);
      document.documentElement.lang = lang === "hi" ? "hi" : "en";
    } catch {}
  }, [lang]);

  const t = useMemo(() => {
    const dict = translations[lang];
    return (key: string) => dict[key] ?? key;
  }, [lang]);

  const value: I18nContextValue = {
    lang,
    setLang,
    toggle: () => setLang((l) => (l === "en" ? "hi" : "en")),
    t,
  };

  return <I18nContext.Provider value={value}>{children}</I18nContext.Provider>;
}

export function useI18n() {
  const ctx = useContext(I18nContext);
  if (!ctx) throw new Error("useI18n must be used within LanguageProvider");
  return ctx;
}


